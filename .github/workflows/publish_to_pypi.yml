name: Publish xrpl-py 🐍 distribution 📦 to PyPI
on:
  push:
    tags:
        - '*'

jobs:
  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest
    env:
        POETRY_VERSION: 1.8.3

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        # Use the lowest supported version of Python for CI/CD
        python-version: "3.8"
    - name: Load cached .local
      id: cache-poetry
      uses: actions/cache@v3
      with:
          path: /home/runner/.local
          key: dotlocal-${{ env.POETRY_VERSION }}-${{ hashFiles('poetry.lock') }}
    - name: Install poetry
      if: steps.cache-poetry.outputs.cache-hit != 'true'
      run: |
        curl -sSL "https://install.python-poetry.org/" | python - --version "${{ env.POETRY_VERSION }}"
        echo "${HOME}/.local/bin" >> $GITHUB_PATH
        poetry --version || exit 1  # Verify installation
    - name: Build a binary wheel and a source tarball
      run: poetry build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
  publish-to-pypi:
    name: >-
        Publish Python 🐍 distribution 📦 to PyPI
    needs: build  # Explicit dependency on build job
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Adjust based on typical publishing time
    permissions:
        # More information about Trusted Publishing and OpenID Connect: https://blog.pypi.org/posts/2023-04-20-introducing-trusted-publishers/
        id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Verify downloaded artifacts
      run: |
        ls dist/*.whl dist/*.tar.gz || exit 1
    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true
        verify-metadata: true

  github-release:
    name: >-
        Sign the Python 🐍 distribution 📦 with Sigstore
        and upload them to GitHub Release
    needs:
    - publish-to-pypi
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Adjust based on typical signing and release time

    permissions:
        contents: write  # IMPORTANT: mandatory for making GitHub Releases
        id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v2.1.1
      with:
        inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
            gh release create
            '${{ github.ref_name }}'
            --repo '${{ github.repository }}'
            --generate-notes ||
            (echo "::error::Failed to create release" && exit 1)
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
       # Upload to GitHub Release using the `gh` CLI.
       # `dist/` contains the built packages, and the
       # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'
