name: Publish xrpl-py 🐍 distribution 📦 to PyPI
on:
  workflow_dispatch:

jobs:
  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      attestations: write
    env:
      POETRY_VERSION: 2.1.1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Validate inputs
        run: |
          set -euo pipefail
          RELEASE_BRANCH="$(git branch --show-current || true)"
          if [[ -z "$RELEASE_BRANCH" ]]; then
            RELEASE_BRANCH="${{ github.ref_name }}"
          fi

          if [[ -z "$RELEASE_BRANCH" ]]; then
            echo "❌ Unable to determine branch name." >&2
            exit 1
          fi

          if [[ ! "${RELEASE_BRANCH,,}" =~ ^release[-/] ]]; then
            echo "❌ Release branch '$RELEASE_BRANCH' must start with 'release-' or 'release/'." >&2
            exit 1
          fi

          if grep -R --exclude-dir=.git --exclude-dir=.github "artifactory.ops.ripple.com" .; then
            echo "❌ Internal Artifactory URL found"
            exit 1
          else
            echo "✅ No Internal Artifactory URL found"
          fi

      - name: Install toml-cli
        run: |
          set -euo pipefail
          python3 -m pip install --user --upgrade toml-cli
          echo "${HOME}/.local/bin" >> "${GITHUB_PATH}"

      - name: Extract project version
        id: project_version
        run: |
          set -euo pipefail

          if ! VERSION="$(toml get --raw pyproject.toml project.version 2>/tmp/toml_err)"; then
            cat /tmp/toml_err >&2 || true
            echo "Unable to retrieve version from pyproject.toml using toml-cli" >&2
            exit 1
          fi
          if [[ -z "${VERSION}" ]]; then
            echo "Version value is empty in pyproject.toml" >&2
            exit 1
          fi
          rm -f /tmp/toml_err
          echo "version=${VERSION}" >> "${GITHUB_OUTPUT}"
          echo "Detected project version: ${VERSION}"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          # Use the lowest supported version of Python for CI/CD
          python-version: "3.9"
      - name: Load cached .local
        id: cache-poetry
        uses: actions/cache@v3
        with:
          path: /home/runner/.local
          key: dotlocal-${{ env.POETRY_VERSION }}-${{ hashFiles('poetry.lock') }}
      - name: Install poetry
        env:
          PIP_INDEX_URL: https://pypi.org/simple
          PIP_NO_CACHE_DIR: "1"
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          python -m pip install "dulwich>=0.22.6,<0.23.0"
          python -m pip install "https://github.com/python-poetry/poetry/releases/download/${POETRY_VERSION}/poetry-${POETRY_VERSION}-py3-none-any.whl"
          poetry --version
      - name: Build a binary wheel and a source tarball
        run: poetry build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Generate build provenance attestation
        id: provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "dist/*"
      - name: Store provenance attestation
        if: steps.provenance.outputs.bundle-path != ''
        uses: actions/upload-artifact@v4
        with:
          name: python-package-provenance
          path: ${{ steps.provenance.outputs.bundle-path }}
  publish-to-pypi:
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    needs: build # Explicit dependency on build job
    runs-on: ubuntu-latest
    timeout-minutes: 10 # Adjust based on typical publishing time
    environment:
      name: official-release
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    permissions:
      # More information about Trusted Publishing and OpenID Connect: https://blog.pypi.org/posts/2023-04-20-introducing-trusted-publishers/
      id-token: write # IMPORTANT: mandatory for trusted publishing
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Verify downloaded artifacts
        run: |
          ls dist/*.whl dist/*.tar.gz || exit 1
      - name: Publish distribution 📦 to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          verify-metadata: true
          attestations: true

  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    needs:
      - publish-to-pypi
    runs-on: ubuntu-latest
    timeout-minutes: 15 # Adjust based on typical signing and release time

    permissions:
      contents: write # IMPORTANT: mandatory for making GitHub Releases
      id-token: write # IMPORTANT: mandatory for sigstore

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Download provenance attestations
        uses: actions/download-artifact@v4
        with:
          name: python-package-provenance
          path: provenance/
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v2.1.1
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --generate-notes ||
          (echo "::error::Failed to create release" && exit 1)
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
          # Upload to GitHub Release using the `gh` CLI.
          # `dist/` contains the built packages, and the
          # sigstore-produced signatures and certificates.
        run: >-
          gh release upload
          '${{ github.ref_name }}'
          dist/**
          provenance/**
          --repo '${{ github.repository }}'
